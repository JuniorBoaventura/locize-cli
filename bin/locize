#!/usr/bin/env node

const program = require('commander');
const colors = require('colors');
const path = require('path');
const fs = require('fs');
const os = require('os');
const url = require('url');
const ini = require('ini');

const home = path.join(os.homedir(), '.locize');
const addPathUrl = 'https://api.locize.io/update/{{projectId}}/{{version}}/{{lng}}/{{ns}}';

const migrate = require('../migrate');
const add = require('../add');
const download = require('../download');

var config = {};

program
  .version(require('../package.json').version)
  .option('-a, --add-path <url>', `Specify the add-path url that should be used (default: ${addPathUrl})`)
  .option('-c, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${home})`, home);

program
  .command('migrate')
  .alias('m')
  .description('migration of existing translation files')
  .option('-k, --api-key <apiKey>', `The api-key that should be used`)
  .option('-i, --project-id <projectId>', `The project-id that should be used`)
  .option('-l, --language <lng>', `Found namespaces will be matched to this language`)
  .option('-v, --ver <version>', `Found namespaces will be matched to this version (default: latest)`)
  .option('-p, --path <path>', `Specify the path that should be used (default: ${process.cwd()})`, process.cwd())
  .option('-L, --parse-language <true|false>', `Parse folders as language (default: true)`, true)
  .option('-f, --format <json>', `File format of namespaces (default: json)`, 'json')
  .action((cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
    } catch (e) {}

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    const apiKey = cmd.apiKey || config.apiKey;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      return;
    }

    const projectId = cmd.projectId || config.projectId;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      return;
    }

    const version = cmd.ver || config.ver || config.version || 'latest';

    if (!path.isAbsolute(cmd.path)) {
      cmd.path = path.join(process.cwd(), cmd.path);
    }

    migrate({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      path: cmd.path,
      language: cmd.language,
      version: version,
      parseLanguage: cmd.parseLanguage,
      format: cmd.format
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize migrate');
    console.log('    $ locize migrate --path ./en --language en');
    console.log('    $ locize migrate --api-key <apiKey> --project-id <projectId> --path ./en --language en');
    console.log();
  });

program
  .command('add <namespace> <key> <value>')
  .alias('a')
  .description('add a new key')
  .option('-k, --api-key <apiKey>', `The api-key that should be used`)
  .option('-i, --project-id <projectId>', `The project-id that should be used`)
  .option('-l, --language <lng>', `The language that should be targeted`)
  .option('-v, --ver <version>', `The version that should be targeted (default: latest)`)
  .action((namespace, key, value, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
    } catch (e) {}

    const apiKey = cmd.apiKey || config.apiKey;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      return;
    }

    const projectId = cmd.projectId || config.projectId;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      return;
    }

    const language = cmd.language || config.language || config.lng;
    if (!language) {
      console.error('  error: missing required argument `language`');
      return;
    }

    const version = cmd.ver || config.ver || config.version || 'latest';

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    add({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      language: language,
      version: version,
      namespace: namespace,
      key: key,
      value: value
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize add common title "the title of my cool app"');
    console.log('    $ locize add common title "the title of my cool app" --language en');
    console.log('    $ locize add common title "the title of my cool app" --api-key <apiKey> --project-id <projectId> --language en');
    console.log();
  });

program
  .command('remove <namespace> <key>')
  .alias('rm')
  .description('remove a key')
  .option('-k, --api-key <apiKey>', `The api-key that should be used`)
  .option('-i, --project-id <projectId>', `The project-id that should be used`)
  .option('-l, --language <lng>', `The language that should be targeted`)
  .option('-v, --ver <version>', `The version that should be targeted (default: latest)`)
  .action((namespace, key, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
    } catch (e) {}

    const apiKey = cmd.apiKey || config.apiKey;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      return;
    }

    const projectId = cmd.projectId || config.projectId;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      return;
    }

    const language = cmd.language || config.language || config.lng;
    if (!language) {
      console.error('  error: missing required argument `language`');
      return;
    }

    const version = cmd.ver || config.ver || config.version || 'latest';

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    add({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      language: language,
      version: version,
      namespace: namespace,
      key: key
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize remove common title');
    console.log('    $ locize remove common title --language en');
    console.log('    $ locize remove common title --api-key <apiKey> --project-id <projectId> --language en');
    console.log();
  });


  program
    .command('download')
    .alias('dl')
    .description('remove a key')
    .option('-i, --project-id <projectId>', `The project-id that should be used`)
    .option('-v, --ver <version>', `The version that should be targeted (default: latest)`)
    .option('-l, --language <lng>', `The language that should be targeted`)
    .option('-n, --namespace <ns>', `The namespace that should be targeted`)
    .option('-t, --target <target>', `The target directory`, process.cwd())
    .action((cmd) => {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}

      const projectId = cmd.projectId || config.projectId;
      if (!projectId) {
        console.error('  error: missing required argument `projectId`');
        return;
      }

      const language = cmd.language;

      const version = cmd.ver;

      const namespace = cmd.namespace;

      const addPath = cmd.addPath || config.addPath || addPathUrl;

      const target = cmd.target;

      download({
        projectId: projectId,
        apiPath: url.parse(addPath).protocol + '//' + url.parse(addPath).host,
        language: language,
        version: version,
        namespace: namespace,
        target: target
      });
    })
    .on('--help', () => {
      console.log('  Examples:');
      console.log();
      console.log('    $ locize download');
      console.log('    $ locize remove --ver latest');
      console.log('    $ locize remove --project-id <projectId> --ver latest --language en --namespace common');
      console.log();
    });


program.parse(process.argv);

if (!process.argv.slice(2).length) {
  return program.outputHelp(colors.red);
}
